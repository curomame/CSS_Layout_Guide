2. CSS 설계 기본 및 실전

2.1 CSS 기본 상세도와 셀렉터

-단순 셀렉터
요소형 셀럭터(타입 셀렉터)
열 p {}
전체 셀렉터
예 * {}

속성 셀렉터
예 a href 

클래스 셀렉터
예 .my-class

ID 셀렉터
#my-ID

의사 클래스(pseudo-class)
예 a:visited

의사요소
예 a::before

결합자
손자 결합자
div p

자녀 결합자
div > p

형제 결합자
div + p

일반 형제 결합자
div ~ p

그룹셀렉터
h1,h2~

캐스케이팅 기초

CSS는 Cascading Style Sheet라는 이름 그대로 캐스캐이딩 구조가 존재
셀렉터가 가리키는 동일 요소의 같은 속성에 다른 값을 설정한 경우, 최종적으로 어떤 값을 적용할지에 관한 규칙임

1.중요도
2.상세도
3.요소형 셀렉터


상세도 기초
1. ID 셀렉터
2. 크래스/속성/의사 셀렉터와 클래스
3. 요소형 셀렉터(의사 요소)

상세도는 specificity calculator에서도 계산 가능

2.2 리셋 CSS
CSS 시작할때는 베이스 스타일을 정해야함.
일반적으로 리셋을 한다.

브라우저는 고유의 기본 스타일을 가지고 있어 최소한의 스타일링이 적용되어 있다.
모든 브라우저의 기본 스타일은 조금씩 다르며, 이를 통일하지 않은 채 CSS를 만들면, 다른 브라우저에서는 의도한대로 표시되지 않는 상황이 발생함
이 문제를 해결하기 위해 베이스 스타일을 정의해야 하고, 일반적으로 하드 리셋 또는 노멀라이즈 라는 방법을 사용함

-하드리셋 CSS
각 요소의 여백을 없애거나 폰트 사이즈를 통일하는 방법

-노멀라이즈 CSS
브라우저간 차이 혹은 버그를 없애면서 유용한 기본 스타일은 그대로 활용하는 노멀라이즈 계열

리셋 CSS는 다양한 스타일의 밑바탕이 되며 이를 전제로 스타일링을 수행함.
도중에 변경을 하면 비용이나 시간이 증가함.

2.3 영단어를 결합하는 방식의 이름
sub-title 하이픈 케이스 케밥 케이스
sub_title 스네이크 케이스
subTitle 로워 캐멀 케이스, 캐멀 케이스
SubTitle 어퍼 케멀 케이스, 파스칼 케이스

2.4 좋은 CSS 설계의 네 가지 목표
좋은 CSS란 무엇일까?

1. 예측 가능하다.
2. 재사용 가능하다.
3. 유지 보수 가능하다.
4. 확장 가능하다.

예측 가능하다
스타일링이 기대한 대로 동작하는지
스타일링 영향 범위 예측할 수 있는지 의미
새로 추가하는 스타일이 기존 스타일에 영향을 미치면 안됨

유지 보수 가능
다른 모듈을 추가하더라도 기존 모듈에 영향을 주지 않고 적용됨

확장 가능

2.5 CSS 설계 실전과 여덟 가지 포인트
좋은 CSS 설계의 네 가지 목표를 구현할 때, 다양한 코드를 작성하게 되는데
아래와 같은 기법들이 해당됨

OOCSS
SMACSS
BEM
PRECSS

이후에도 여덟가지 포인트중 어떤것에 해당하는지 계속해서 확인해야함

1.특성에 따라 CSS분류
2.HTML과 스타일링 느슨히 결합
3.영향 범위를 지나치게 넓히지 않음
4.특정한 콘텍스트에 지나치게 의존하지 않음
5.상세도를 지나치게 높이지 않음
6.클래스 이름에서 영향 범위 유추 가능
7.클래스 이름에서 형태 기능 역할 유추 가능
8.확장하기 쉬움


1.특성에 따라 CSS를 분류한다.
역할이나 특성에 따라 그룹을 나눔
사이트 전체에 기반되는 베이스 그룹과 콘텐츠 형성하는 레이아웃그룹으로 만듦

[베이스 그룹]
사이트 전체에 적용해야할 스타일
폰트 사이트전체 글씨 크기 등
body에 지정하고 플루이드 이미지 코드와 같은것

[레이아웃 그룹]
레이아웃과 관련있는 스타일
앞에 ly를 붙여 정의

[모듈 그룹]
사이트 내 페이지들에서 재사용 할수 있는 그룹
앞에 bl을 붙여 정의


모듈 자체에는 레이아웃과 관련된 지정을 하지 않는게 좋음.
ex)
postion(static,relative 제외)
z-index
top/right/bottom/left
float
width
margin

모듈 자체에 이 값들을 직접 지정하지 않음으로써, 모듈은 부모 요소에 따라 가로를 채우고
여러 모듈이 배치되어도 상하여백이 조정된 상태를 이룸
하지만 각각 모듈사이 위 아래 여백 일일이 설정하는 것은 어렵기 때문에 margin-top / margin-bottom 정도는 모듈 자체에 포함시키기도 함


2. HTML과 CSS의 느슨한 결합
즉 요소형 셀렉터를 사용하지 않는것이 좋은 방법임 그게 느슨한 연결이고
새로운 이름의 클래스를 이용해 클랙스 셀렉터를 이용하는 것이 좋음
다른 요소는 몰라도 div p span같은경우에는 특히나 조심해야함


3. 영향 범위를 지나치게 넓히지 않는다
지나치게가 핵심이며, 확실하게 계산한 결과 영향 범위가 넓어진 것이라면 괜찮다.
- 범위를 줄이는 방법(영향 범위를 줄이기)
- 영향 범위가 넓은 CSS에 포함되는 스타일링을 가능한 최소한으로 하기.

4. 특정한 콘텍스트에 지나치게 의존하지 않는다.
콘텍스트에 의존하면 문제가 되는 이유는, 콘텍스트가 변하면 코드가 동작하지 않게 되기 때문임

모듈같은 경우에는 사이트 위치에 관계없이 재사용하고 싶다라는 것을 전체로 하기 때문에
어디서나 사용될수 있도록 만들어야하는 것과 관계있다.


5. 상세도를 지나치게 높이지 않는다.
상세도가 높은 CSS는
-셀렉터를 예측하기 어렵다
-다른 요소에 대한 의존도가 높아진다.
-덮어쓰기 어렵다
-유지 보수에 들어가는 수고가 증가한다.
등의 문제를 가지고 있음

기존의 상세도가 너무 높아져서 !important같은 것들을 사용하기도 하는데
이걸 사용할수록 더 더러워지는것을 알아야한다.
그래서 기본 팁은
'셀렉터를 사용할 때는 클래스 셀렉터를 사용한다'가 중요하다.
ID 셀렉터는 그 자체로도 상세도가 높으며 HTML측의 한 페이지 안에서 동일한 값은 한번만 사용해야한다는 제약이 있어 ID를 스타일링 목적으로 사용하는것은 좋지 않음


6.클래스 이름에서 영향 범위를 유추할 수 있다.
웹사이트가 규모가 커질수록 모듈이나 다른 클래스도 늘어나기 때문에, 이 클래스를 수정하면 어디까지 영향을 미치는지 판단할 수 있는 점이 매우 중요하다.
영향 범위가 넓은지 좁은지를 클래스 이름에서 확실하게 알 수 있도록 하는것이 중요

클래스 이름에서 영향 범위를 유추할 수 있도록 하려면
'모듈의 자녀 요소에는 모듈의 루트 요소의 클래스 이름을 상속시키는'방법이 좋다.
루트 요소 - 최상위 부모 요소

ex => title => bl_module_title
제목에 다 적용되구나! => 어느 모듈의 제목만 적용되구나!

7. 클래스 이름에서 형태, 기능, 역할을 유추할 수 있다.
title1 title2 title3 > page_title section-title sub-title

bl_module_1 bl_module_2 bl_module_3 => bl_media bl_card bl_list

1)콘텍스트가 아니라 형태, 기능,역할을 기반으로 만든다.
2.Media Accordion, Slider등 일반적인 호칭을 사용한다.

8.확장하기 쉽다.
가능한 변경을 견딜 수 있도록 설계해 두는 것이 효율적

1. 확장하기 쉬운 클래스 설계를 수행한다(멀티 클래스 설계 채용)
2. 확장용으로 작성하는 클래스는 기능, 역할에 따라 적절한 상세도와 영향 범위를 갖는다.

싱글 클래스와 멀티 클래스

어떤 모듈의 스타일이 조금만 다르면 배리에이션(variation)을 만든다.
혹은 상태의 변화를 구현한다.

싱글 클래스 - html에 대한 모듈 클래스를 항상 하나로 연결하는 방법
멀티 클래스 - 모듈에 관련된 클래스를 형태나 기능,역할에 따라 적절히 분할해 HTML의 여러 모듈의 연결을 허용하는 기법


모듈 리팩터링
기존 클래스에 무언가 변경을 추가해 덮어쓰기 위한 클래스를 '모디파이어'라고 칭함
한가지 속성을 변경하기 위한 클래스를 헬퍼 클래스 또는 유틸리티 클래스라고 함

모디파이어를 붙이는 위치는 변경을 추가하는 요소의 숫자와 일치시키는 것이 아니라, 제공할 기능마다 하나씩 만든다
하지만 이때도
모디파이어에서 예측가능하며, 하나의 모디파이어는 하나의 기능과 과하거나 부족함 없이 연결되어 있어야한다.

하지만 너무 많은 모디파이어는 혼란을 부른다.
단순한 덮어쓰기의 경우는 헬퍼 클래스를 대신 사용할수있는지, 모디파이어 여러개 붙인것 많이 사용할 시에는 새로운 모듈을 만들던지해서
복잡도를 없애보자


2.6 모듈의 상세도를 고려한다.
모듈의 상세도에 대한 지침이 필요함.
최소모듈과 복합모듈에 대한 이해를 해야함
최소 모듈은 아토믹 디자인의 원자,
복합 모듈은 분자나 유기체로 생각하면 됨

2.7 CSS 설계의 필요성
한페이지만 만드는 그런 페이지라면 딱히 설계가 필요없음
하지만 수백여페이지에 이르는 중간 규모 이상의 안건에서는 CSS 설계를 지나칠 정도로 꼼꼼하게 해야한다는 각인을 해야함.

CSS 설계에 관해서는
1. 작은 규모의 사이트를 고려한 코드를 중간 규모 이상의 프로젝트에 그대로 적용해서는 안된다.
2. 중간 규모 이상의 사이트를 고려해 CSS를 설계한 코드를 작은 규모의 프로젝트에는 그대로 적용할 수 있다.
3. 갑자기 중간규모 사이트에 CSS 설계를 적용하려고 해도 잘 안된다.

작은 일의 반복에 의한 연습이 중요